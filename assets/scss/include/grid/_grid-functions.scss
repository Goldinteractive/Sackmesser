/**
 *
 * Do not touch this file if you don't know what you are doing
 * The grid functions were originally part of semantic.gs and here they got extended
 *
 */

@function gridsystem-width($columns: $default-columns-amount, $column-width: $default-column-width, $gutter-width: $default-gutter-width) {
	@return $column-width * $columns + $gutter-width * $columns;
}

@mixin column(
	$grid-total-width,
	$x: 1,
	$columns: $default-columns-amount,
	$column-width: $default-column-width,
	$gutter-width: $default-gutter-width
) {
	float: left;
	width: $grid-total-width * (($gutter-width + $column-width) * $x - $gutter-width) / gridsystem-width($columns, $column-width, $gutter-width);
	margin-left: $grid-total-width * $gutter-width * 0.5 / gridsystem-width($columns, $column-width, $gutter-width);
	margin-right: $grid-total-width * $gutter-width * 0.5 / gridsystem-width($columns, $column-width, $gutter-width);
	// *width: $grid-total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns,$column-width,$gutter-width))-$correction;
	// *margin: 0 $grid-total-width*(($gutter-width*.5)/gridsystem-width($columns,$column-width,$gutter-width))-$correction;
}

@mixin inner(
	$grid-total-width,
	$x: 1, $columns:
	$default-columns-amount,
	$column-width: $default-column-width,
	$gutter-width: $default-gutter-width
) {

	width: $grid-total-width * (($gutter-width + $column-width) * $x - $gutter-width) / gridsystem-width($columns, $column-width, $gutter-width) - $grid-total-width * $gutter-width * 0.5 / gridsystem-width($columns, $column-width, $gutter-width);
}

@mixin push(
	$grid-total-width,
	$offset: 1,
	$columns: $default-columns-amount,
	$column-width: $default-column-width,
	$gutter-width: $default-gutter-width
) {
	margin-left: $grid-total-width * ($gutter-width + $column-width) * $offset / gridsystem-width($columns, $column-width, $gutter-width) + $grid-total-width * $gutter-width * 0.5 / gridsystem-width($columns, $column-width, $gutter-width) !important;
}

@mixin pull(
	$grid-total-width,
	$offset: 1,
	$columns: $default-columns-amount,
	$column-width: $default-column-width,
	$gutter-width: $default-gutter-width
) {
	margin-right: $grid-total-width * ($gutter-width + $column-width) * $offset / gridsystem-width($columns, $column-width, $gutter-width) + $grid-total-width * $gutter-width * 0.5 / gridsystem-width($columns, $column-width, $gutter-width) !important;
}

/**
 * Building the grid classes
 */

@mixin loop-grid(
	$grid-total-width,
	$columns,
	$column-width,
	$gutter-width,
	$device: ""
) {
	@for $i from 1 through $columns {
		.g-#{$device}#{$i} {
			@include column($grid-total-width, $i, $columns, $column-width, $gutter-width);
		}
		.g-#{$device}#{$i}-inner {
			@include inner($grid-total-width, $i, $columns, $column-width, $gutter-width);
		}
		.push-#{$device}#{$i} {
			@include push($grid-total-width, $i, $columns, $column-width, $gutter-width);
		}
		.pull-#{$device}#{$i} {
			@include pull($grid-total-width, $i, $columns, $column-width, $gutter-width);
		}
	}
}

@mixin create-grid(
	$columns: $default-columns-amount,
	$column-width: $default-column-width,
	$gutter-width: $default-gutter-width,
	$device: "",
	$isFluid: false,
	$mediaQuery: false,
	$grid-total-width: 100%
) {

	@if $device and $device != "" {
		$device: $device + "-";
	}

	@if not $isFluid {
		$grid-total-width: gridsystem-width($columns, $column-width, $gutter-width);
	}

	@if $mediaQuery {
		@media #{$mediaQuery} {
			@include loop-grid($grid-total-width, $columns, $column-width, $gutter-width, $device);
		}
	}
	@else {
		@include loop-grid($grid-total-width, $columns, $column-width, $gutter-width, $device);
	}
}